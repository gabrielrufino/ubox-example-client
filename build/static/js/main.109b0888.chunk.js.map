{"version":3,"sources":["components/Header.tsx","screens/Home.tsx","screens/Login.tsx","screens/Register.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","role","aria-label","to","aria-expanded","aria-hidden","Home","Login","useState","username","setUsername","password","setPassword","a","process","fetch","method","body","JSON","stringify","headers","response","json","data","localStorage","setItem","Authorization","alert","type","placeholder","onChange","event","target","value","onClick","Register","name","setName","email","setEmail","errors","setErrors","status","ok","length","join","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.109b0888.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Link } from 'react-router-dom'\n\nfunction Header() {\n  return (\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-brand\">\n        <Link className=\"navbar-item\" to=\"/\">\n          <h1 className=\"has-text-weight-medium\">UBox Example Client</h1>\n        </Link>\n\n        <a role=\"button\" className=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\">\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n        </a>\n      </div>\n    </nav>\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nimport { Link } from 'react-router-dom'\n\nfunction Home() {\n  return (\n    <div>\n      <Link to=\"/login\">\n        <button className=\"button is-primary is-medium is-fullwidth\">Login</button>\n      </Link>\n      <div className=\"mb-4\" />\n      <Link to=\"/register\">\n        <button className=\"button is-link is-medium is-fullwidth\">Register</button>\n      </Link>\n    </div>\n  )\n}\n\nexport default Home\n","import React, {useState} from 'react'\n\nfunction Login () {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  async function createToken () {\n    const { REACT_APP_API_URL } = process.env\n\n    try {\n      const response = await fetch(`${REACT_APP_API_URL}/api/tokens`, {\n        method: 'POST',\n        body: JSON.stringify({\n          username,\n          password\n        }),\n        headers: { 'Content-Type': 'application/json' }\n      })\n  \n      const data = await response.json()\n  \n      localStorage.setItem('token', data.Authorization)\n    } catch {\n      alert('Unexpected error!')\n    }\n  }\n\n  return (\n    <div>\n      <label className=\"label\">Username</label>\n      <input\n        className=\"input is-primary is-medium mb-5\"\n        type=\"text\"\n        placeholder=\"gabrielrufino\"\n        onChange={event => setUsername(event.target.value)}\n      />\n\n      <label className=\"label\">Password</label>\n      <input\n        className=\"input is-primary is-medium mb-5\"\n        type=\"password\"\n        placeholder=\"••••••••\"\n        onChange={event => setPassword(event.target.value)}\n      />\n\n      <button className=\"button is-primary is-medium is-fullwidth\" onClick={createToken}>Login</button>\n    </div>\n  )\n}\n\nexport default Login\n","import React, {useState} from 'react'\nimport { Redirect } from 'react-router-dom'\n\nfunction Register() {\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [errors, setErrors] = useState({\n    name: [],\n    email: [],\n    username: [],\n    password: []\n  })\n\n  async function createUser() {\n    const { REACT_APP_API_URL } = process.env\n\n    try {\n      const response = await fetch(`${REACT_APP_API_URL}/api/users`, {\n        method: 'POST',\n        body: JSON.stringify({\n          name,\n          email,\n          username,\n          password\n        }),\n        headers: { 'Content-Type': 'application/json' }\n      })\n\n      if (response.status === 400) {\n        const data = await response.json()\n        setErrors(data)\n      } else if (response.ok) {\n        return <Redirect to=\"/login\" />\n      }\n    } catch {\n      alert('Unexpected error')\n    }\n  }\n\n  return (\n    <div>\n      <label className=\"label\">Name</label>\n      <input\n        className={`input is-medium ${errors.name.length ? 'is-danger': 'is-primary'}`}\n        type=\"text\"\n        placeholder=\"Gabriel Rufino\"\n        onChange={event => setName(event.target.value)}\n      />\n      {errors.name && <small className=\"has-text-danger\">{errors.name.join('\\n')}</small>}\n      <div className=\"mb-5\" />\n\n      <label className=\"label\">E-mail</label>\n      <input\n        className={`input is-medium ${errors.email.length ? 'is-danger': 'is-primary'}`}\n        type=\"text\"\n        placeholder=\"contato@gabrielrufino.com\"\n        onChange={event => setEmail(event.target.value)}\n      />\n      {errors.email && <small className=\"has-text-danger\">{errors.email.join('\\n')}</small>}\n      <div className=\"mb-5\" />\n\n      <label className=\"label\">Username</label>\n      <input\n        className={`input is-medium ${errors.username.length ? 'is-danger': 'is-primary'}`}\n        type=\"text\"\n        placeholder=\"gabrielrufino\"\n        onChange={event => setUsername(event.target.value)}\n      />\n      {errors.username && <small className=\"has-text-danger\">{errors.username.join('\\n')}</small>}\n      <div className=\"mb-5\" />\n\n      <label className=\"label\">Password</label>\n      <input\n        className={`input is-medium ${errors.password.length ? 'is-danger': 'is-primary'}`}\n        type=\"password\"\n        placeholder=\"••••••••\"\n        onChange={event => setPassword(event.target.value)}\n      />\n      {errors.password && <small className=\"has-text-danger\">{errors.password.join('\\n')}</small>}\n      <div className=\"mb-5\" />\n\n      <button className=\"button is-primary is-medium is-fullwidth\" onClick={createUser}>Register</button>\n    </div>\n  )\n}\n\nexport default Register\n","import 'bulma/css/bulma.min.css';\n\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nimport Header from './components/Header'\n\nimport Home from './screens/Home'\nimport Login from './screens/Login'\nimport Register from './screens/Register'\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Header />\n\n        <div className=\"container is-fluid\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/login\">\n              <Login />\n            </Route>\n            <Route path=\"/register\">\n              <Register />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}